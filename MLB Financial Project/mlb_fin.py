import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport seaborn as snsimport osimport statsmodels.api as smfrom pygam import LinearGAM, sfrom sklearn.preprocessing import StandardScalerfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import mean_squared_error, mean_absolute_errorfrom statsmodels.stats.outliers_influence import variance_inflation_factorimport dashfrom dash import dcc, htmlfrom dash.dependencies import Output, Inputimport plotly.graph_objs as goimport webbrowserdef load_data(directory):        """function used to load  in data from statista     files and format them into dataframes"""        dfs = []    for file in os.listdir(directory):        if file.endswith('.csv'):            file_path = os.path.join(directory, file)            df = pd.read_csv(file_path)            if file == "revenue.csv":                ret_df = df            else:                dfs.append(df)            for df in dfs:        ret_df = pd.merge(ret_df, df, on='year', how='outer')        ret_df.sort_index(ascending=False, inplace=True)    ret_df.reset_index(drop=True, inplace=True)        return ret_df#creating dataframes for team financial datadf_list = []angels = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/angels')df_list.append(angels)astros = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/astros')df_list.append(astros)athletics = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/athletics')df_list.append(athletics)bluejays = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/bluejays')df_list.append(bluejays)braves = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/braves')df_list.append(braves)brewers = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/brewers')df_list.append(brewers)cardinals = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/cardinals')df_list.append(cardinals)cubs = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/cubs')df_list.append(cubs)dbacks = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/dbacks')df_list.append(dbacks)dodgers = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/dodgers')df_list.append(dodgers)giants = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/giants')df_list.append(giants)guardians = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/guardians')df_list.append(guardians)mariners = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/mariners')df_list.append(mariners)marlins = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/marlins')df_list.append(marlins)mets = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/mets')df_list.append(mets)nationals = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/nationals')df_list.append(nationals)orioles = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/orioles')df_list.append(orioles)padres = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/padres')df_list.append(padres)phillies = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/phillies')df_list.append(phillies)pirates = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/pirates')df_list.append(pirates)rangers = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/rangers')df_list.append(rangers)rays = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/rays')df_list.append(rays)reds = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/reds')df_list.append(reds)redsox = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/redsox')df_list.append(redsox)rockies = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/rockies')df_list.append(rockies)royals = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/royals')df_list.append(royals)tigers = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/tigers')df_list.append(tigers)twins = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/twins')df_list.append(twins)whitesox = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/whitesox')df_list.append(whitesox)yankees = load_data('/Users/ethanwang17/Desktop/career/mlb_financials/financials/yankees')df_list.append(yankees)#formatting and organizing the datadef fill_na(df, row_ind, col):        """filling in the missing years' data    with the mean of the previous and following    years' numbers"""        val_before = df.loc[row_ind - 1, col]    val_after = df.loc[row_ind + 1, col]    fill_val = ((val_before + val_after) / 2)    df.loc[row_ind, col] = fill_val#every statistic is in millions except for franchise value which is in billions#average ticket price is in US dollarscpi = [177.1, 179.9, 184.0, 188.9, 195.3, 201.6, 207.3, 215.3, 214.5, 218.1, 224.9, 229.6,        232.9, 236.7, 237.0, 240.0, 245.1, 251.1, 255.7, 258.8, 270.9, 292.7, 301.9]for i in range(len(df_list)):    df = df_list[i]    fill_na(df, 3, 'gate_rec')    fill_na(df, 6, 'tick_price')    fill_na(df, 3, 'attendance')    df['fran_val'] = pd.to_numeric(df['fran_val'].str.replace(',', ''), errors='coerce')    df['CPI'] = cpi[::-1]    df['scale_fact'] = 1 / (df['CPI'] / df.loc[df['year'] == 2023, 'CPI'].values[0])        for col in df.columns[1:-3]:        if col != 'attendance':            df[col] = df[col] * df['scale_fact']        df_list[i] = df.iloc[:, :-2]    for df in df_list:    df['player_exp_prop'] = df['player_exp'] / df['revenue']team_names = ['Los Angeles Angels', 'Houston Astros', 'Oakland Athletics', 'Toronto Blue Jays', 'Atlanta Braves', 'Milwaukee Brewers',         'St. Louis Cardinals', 'Chicago Cubs', 'Arizona Diamondbacks', 'Los Angeles Dodgers', 'San Francisco Giants', 'Cleveland Guardians',         'Seattle Mariners', 'Miami Marlins', 'New York Mets', 'Washington Nationals', 'Baltimore Orioles', 'San Diego Padres',         'Philadelphia Phillies', 'Pittsburgh Pirates', 'Texas Rangers', 'Tampa Bay Rays', 'Cincinnati Reds', 'Boston Red Sox',          'Colorado Rockies', 'Kansas City Royals', 'Detroit Tigers', 'Minnesota Twins', 'Chicago White Sox', 'New York Yankees']#importing team statistics datadef import_teams(path):    csvs = sorted([file for file in os.listdir(path) if file.endswith('.csv')])    dfs = []    for file in csvs:        file_path = os.path.join(path, file)        data = pd.read_csv(file_path)        dfs.append(data)    return dfspath = '/Users/ethanwang17/Desktop/career/mlb_financials/team_stats'team_data = import_teams(path)        for fin_df, team_df in zip(df_list, team_data):    col = list(fin_df['tick_price'][1:18])    team_df['tick_price'] = col    col2 = list(fin_df['player_exp_prop'][1:18])    team_df['player_exp_prop'] = col2for team in team_data:    team.columns = ['year', 'pyth_win', 'ops', 'whip_era', 'allstars', 'tick_price', 'pe_prop']    team.drop(2, inplace = True)    team = team.drop(columns = 'allstars', inplace = True)    for team in team_data:    low = team['pyth_win'].min()    team['win_above'] = team['pyth_win'] - low    team_df = pd.concat(team_data, axis=0)team_df.reset_index(inplace = True)team_df.drop(columns = ['index', 'year'], inplace = True)dash_dict2 = dict(zip(team_names, team_data))#GAM#BEGINNINGinp = team_df[['win_above', 'ops', 'whip_era', 'pe_prop']]out = team_df['tick_price']x = inp.valuesy = out.values.ravel()x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)scaler = StandardScaler()x_train_stand = scaler.fit_transform(x_train)x_test_stand = scaler.transform(x_test)#check VIFvif = pd.DataFrame()vif['Variable'] = inp.columnsvif['VIF'] = [variance_inflation_factor(x_train_stand, i) for i in range(x_train_stand.shape[1])]vif['VIF'] = round(vif['VIF'], 2)print(vif)#model with regularization termbest_lam = 4gam = LinearGAM(s(0, lam=best_lam) + s(1, lam=best_lam) + s(2, lam=best_lam) + s(3, lam=best_lam))#fitting the modelgam.fit(x_train_stand, y_train)#predictions on the testing sety_pred = gam.predict(x_test_stand)#mse and mae calculationmse = mean_squared_error(y_test, y_pred)mae = mean_absolute_error(y_test, y_pred)print("Mean Squared Error (MSE):", mse)print("Mean Absolute Error (MAE):", mae)#partial dependence plotstitles = ['Win-Loss % Above\nLowest Season', 'OPS', 'WHIP+ERA', 'Player Expenses as\nProportion of Revenue']x_labels = ['% Above', 'OPS', 'WHIP+ERA', 'PE/Revenue']fig, axs = plt.subplots(2, 2, figsize=(12, 10), facecolor='gray')for i, ax in enumerate(axs.flat):    XX = gam.generate_X_grid(term=i)    XX_original_scale = scaler.inverse_transform(XX)    ax.plot(XX_original_scale[:, i], gam.partial_dependence(term=i, X=XX))    ax.plot(XX_original_scale[:, i], gam.partial_dependence(term=i, X=XX, width=0.95)[1], c='r', ls='--')    ax.set_title(titles[i], fontsize = 14, fontweight = 'bold')    ax.set_xlabel(x_labels[i])    ax.set_ylabel('Ticket Price')    ax.grid(True, linestyle='--', alpha=0.7)    fig.suptitle("Partial Dependence Plots", fontsize=20, fontweight='bold')plt.tight_layout()plt.show()#component-wise plotnum_predictors = XX_original_scale.shape[1]fig, axs = plt.subplots(2, 2, figsize=(12, 10), facecolor='gray')axs_flat = axs.flatten()for i in range(num_predictors):    XX = gam.generate_X_grid(term=i)    XX_original_scale = scaler.inverse_transform(XX)        pdp_vals = gam.partial_dependence(term=i, X=XX)        axs_flat[i].plot(XX_original_scale[:, i], pdp_vals, linewidth=4, color='green', alpha=0.8)    axs_flat[i].set_title(titles[i], fontsize=14, fontweight='bold')    axs_flat[i].set_xlabel(x_labels[i])    axs_flat[i].set_ylabel('Ticket Price')    axs_flat[i].grid(True, linestyle='--', alpha=0.7)    fig.suptitle("Component-Wise Plots", fontsize=20, fontweight='bold')plt.tight_layout()plt.show()#GAM#END#scatterplot dfsscatter_df = pd.concat(df_list, axis=0)nan_col = scatter_df.columns[scatter_df.isna().any()].tolist()scatter_df = scatter_df.dropna(subset = nan_col)scatter_df.reset_index(inplace = True)scatter_df.drop(columns = ['index', 'year'], inplace = True)scatter_df.columns = ['Revenue (millions-USD)', 'Gate Receipts (millions-USD)', 'Operating Income (millions-USD)', 'Ticket Price (USD)',                      'Franchise Value (billions-USD)', 'Player Expenses (millions-USD)', 'Attendance (millions)', 'Player Expense Proportion']scatter_cor = scatter_df.corr()def pct_change(val, next_val):    if (val < 0 and next_val < 0) or (val < 0 and next_val > 0):        pct_change = (next_val - val) / abs(val) * 100    else:        pct_change = (next_val - val) / val * 100    return pct_change    df_list2 = []for df in df_list:    reversed_df = df.iloc[::-1]    pct_change_df = pd.DataFrame()        for col in reversed_df.columns[1:]:        if col != reversed_df.columns[0]:            pct_change_df[col] = [                pct_change(reversed_df[col].iloc[i], reversed_df[col].iloc[i+1])                for i in range(len(reversed_df) - 1)            ]        else:            pct_change_df[col] = reversed_df[col]                pct_change_df = pct_change_df.iloc[::-1]    pct_change_df.reset_index(drop = True, inplace = True)    pct_change_df.insert(0, 'year', ['2022-2023', '2021-2022', '2020-2021', '2019-2020', '2018-2019', '2017-2018', '2016-2017',                                     '2015-2016', '2014-2015', '2013-2014', '2012-2013', '2011-2012', '2010-2011', '2009-2010',                                     '2008-2009', '2007-2008', '2006-2007', '2005-2006', '2004-2005', '2003-2004', '2002-2003', '2001-2002'])    df_list2.append(pct_change_df)    change_df = pd.concat(df_list2, axis=0)nan_col2 = change_df.columns[change_df.isna().any()].tolist()change_df = change_df.dropna(subset = nan_col2)change_df.reset_index(inplace = True)change_df.drop(columns = ['index', 'year'], inplace = True)change_df.columns = ['change_rev', 'change_gaterec', 'change_operinc', 'change_tickprice',                      'change_franval', 'change_playerexp', 'change_attend', 'change_prop']ticket_prices = []flat_prices = []for df in df_list:    tick_price = list(df['tick_price'][1:17])    tick_price.pop(2)    ticket_prices.append(tick_price)    win_pcts = []flat_pcts = []for df in team_data:    win_pct = list(df['pyth_win'][1:])    win_pcts.append(win_pct)    for lst in ticket_prices:    for item in lst:        flat_prices.append(item)for lst in win_pcts:    for item in lst:        flat_pcts.append(item)        correlation_matrix = np.corrcoef(flat_pcts, flat_prices)r = correlation_matrix[0, 1]plt.scatter(flat_pcts, flat_prices)plt.title('Win-Loss % vs. Ticket Price\nOffset by One Year', fontweight='bold')plt.xlabel('Pythagorean\nWin-Loss %')plt.ylabel('Ticket Price (USD)')coeff = np.polyfit(flat_pcts, flat_prices, 1)plt.plot(flat_pcts, np.polyval(coeff, flat_pcts), color='red', label='Best Fit Line')plt.gca().set_facecolor('lightgray')plt.grid(True, linestyle='--', alpha=0.7)plt.text(0.05, 0.95, f'r = {r:.2f}', fontsize=12, fontweight='bold', transform=plt.gca().transAxes, va='top')plt.show()    #scatterplots #BEGINNINGscatters = dash.Dash(__name__)dropdown_options = [{'label': col, 'value': col} for col in scatter_df.columns]scatters.layout = html.Div([    html.H1('MLB Financials - Scatterplots'),    html.Div([        dcc.Dropdown(            id = 'x-dropdown',            options=[{'label': col, 'value': col} for col in scatter_df.columns],            value=  scatter_df.columns[0],        )    ]),    html.Div([        dcc.Dropdown(            id = 'y-dropdown',            options = dropdown_options,            value = dropdown_options[0]['value'],        )    ]),    dcc.Graph(id = 'scatter-plot')])@scatters.callback(    Output('scatter-plot', 'figure'),    [Input('x-dropdown', 'value'),     Input('y-dropdown', 'value')])def update_graph(x_col, y_col):    graph = go.Figure()        if x_col in scatter_df.columns and y_col in scatter_df.columns:        x_data = scatter_df[x_col]        y_data = scatter_df[y_col]        graph.add_trace(go.Scatter(x = x_data,                                   y = y_data,                                   mode = 'markers',                                   marker = dict(size = 8,                                                 color = 'blue',                                                 opacity = 0.7)))        graph.update_layout(title = str(x_col) + ' vs. ' + str(y_col),                            xaxis_title = x_col,                            yaxis_title = y_col,                            height = 800,                            width = 1300)        slope, intercept = np.polyfit(x_data, y_data, 1)        r_value = np.corrcoef(x_data, y_data)[0, 1]        r_squared = r_value ** 2                graph.add_annotation(            x = np.min(x_data),            y = np.max(y_data),            text = f'<b>R = {r_value:.2f}</b>',            showarrow = False,            font = dict(size=14),        )                graph.add_annotation(            x = np.min(x_data),            y = np.max(y_data) - np.std(y_data),            text = f'<b>R2 = {r_squared:.2f}</b>',            showarrow = False,            font = dict(size=14),        )            return graphif __name__ == '__main__':    scatters.run_server(port = 8050, debug = True)webbrowser.open('http://127.0.0.1:8050/')#scatterplots#END#scatterplots for pct change #BEGINNINGchange = dash.Dash(__name__)dropdown_options = [{'label': col, 'value': col} for col in change_df.columns]change.layout = html.Div([    html.H1('MLB Financials - Scatterplots'),    html.Div([        dcc.Dropdown(            id = 'x-dropdown',            options=[{'label': col, 'value': col} for col in change_df.columns],            value=  change_df.columns[0],        )    ]),    html.Div([        dcc.Dropdown(            id = 'y-dropdown',            options = dropdown_options,            value = dropdown_options[0]['value'],        )    ]),    dcc.Graph(id = 'scatter-plot')])@change.callback(    Output('scatter-plot', 'figure'),    [Input('x-dropdown', 'value'),     Input('y-dropdown', 'value')])def update_graph1(x_col, y_col):    graph = go.Figure()        if x_col in change_df.columns and y_col in change_df.columns:        x_data = change_df[x_col]        y_data = change_df[y_col]        graph.add_trace(go.Scatter(x = x_data,                                   y = y_data,                                   mode = 'markers',                                   marker = dict(size = 8,                                                 color = 'blue',                                                 opacity = 0.7)))        graph.update_layout(title = str(x_col) + ' vs. ' + str(y_col),                            xaxis_title = x_col,                            yaxis_title = y_col,                            height = 800,                            width = 1300)        slope, intercept = np.polyfit(x_data, y_data, 1)        r_value = np.corrcoef(x_data, y_data)[0, 1]        r_squared = r_value ** 2                graph.add_annotation(            x = np.min(x_data),            y = np.max(y_data),            text = f'<b>R = {r_value:.2f}</b>',            showarrow = False,            font = dict(size=14),        )                graph.add_annotation(            x = np.min(x_data),            y = np.max(y_data) - np.std(y_data),            text = f'<b>R2 = {r_squared:.2f}</b>',            showarrow = False,            font = dict(size=14),        )            return graphif __name__ == '__main__':    change.run_server(port = 8049, debug = True)webbrowser.open('http://127.0.0.1:8049/')#scatterplots for pct change #END#ticket price line graph dashboard #BEGINNINGtick_df_list = []for df in df_list:    new_df = df.drop(index = 3)    tick_df_list.append(new_df)    dash_dict = dict(zip(team_names, tick_df_list))    tick_price = dash.Dash(__name__)tick_price.layout = html.Div([    html.H1('MLB Ticket Price by Team (time series)'),    html.Div([        dcc.Dropdown(            id = 'team-dropdown',            options=[{'label': team, 'value': team} for team in team_names],            value = team_names[0:1],            multi = True          )    ]),    dcc.Graph(id = 'line-graph')])@tick_price.callback(    Output('line-graph', 'figure'),    [Input('team-dropdown', 'value')])def update_graph2(selected_teams):        graph = go.Figure()    x_data = []    y_data = []    for select in selected_teams:        selected_df = dash_dict.get(select)        if selected_df is not None:            x_data += list(selected_df['year'][1:18])            y_data += list(selected_df['tick_price'][1:18])            graph.add_trace(go.Scatter(x = list(selected_df['year'][1:18]),                                       y = list(selected_df['tick_price'][1:18]),                                       mode = 'lines',                                        name = select))    graph.update_layout(        title = 'Yearly Average MLB Ticket Price',        xaxis_title = 'Year',        yaxis_title = 'Average Ticket Price (USD)',        xaxis = dict(tickmode = 'array',                      tickvals = np.arange(2006, 2023, 1),                      ticktext = np.arange(2006, 2023, 1),                     range=[2006, 2022]),        showlegend = True)            return graphif __name__ == '__main__':    tick_price.run_server(port = 8051, debug = True)    webbrowser.open('http://127.0.0.1:8051/')#ticket price#END#win pct line graph#BEGINNINGpyth_win = dash.Dash(__name__)pyth_win.layout = html.Div([    html.H1('MLB Pythagorean Win-Loss % (Time Series)'),    html.Div([        dcc.Dropdown(            id = 'team-dropdown',            options=[{'label': team, 'value': team} for team in team_names],            value = team_names[0:1],            multi = True          )    ]),    dcc.Graph(id = 'line-graph')])@pyth_win.callback(    Output('line-graph', 'figure'),    [Input('team-dropdown', 'value')])def update_graph3(selected_teams):        graph = go.Figure()    x_data = []    y_data = []    for select in selected_teams:        selected_df = dash_dict2.get(select)        if selected_df is not None:            x_data += list(selected_df['year'])            y_data += list(selected_df['pyth_win'])            graph.add_trace(go.Scatter(x = list(selected_df['year']),                                        y = list(selected_df['pyth_win']),                                        mode = 'lines',                                        name = select))    graph.update_layout(        title = 'Yearly Pythagorean Win-Loss %',        xaxis_title = 'Year',        yaxis_title = 'Pythagorean Win-Loss %',        xaxis = dict(tickmode = 'array',                      tickvals = np.arange(2006, 2023, 1),                      ticktext = np.arange(2006, 2023, 1),                     range=[2006, 2022]),        showlegend = True)            return graphif __name__ == '__main__':    pyth_win.run_server(port = 8055, debug = True)    webbrowser.open('http://127.0.0.1:8055/')#win pct line graph#END#bar graphs for yearly revenue #BEGINNINGteam_names2 = ['Angels', 'Astros', 'Athletics', 'Blue Jays', 'Braves', 'Brewers',         'Cardinals', 'Cubs', 'Diamondbacks', 'Dodgers', 'Giants', 'Guardians',         'Mariners ', 'Marlins', 'Mets', 'Nationals', 'Orioles', 'Padres',         'Phillies', 'Pirates', 'Rangers', 'Rays', 'Reds', 'Red Sox',          'Rockies', 'Royals', 'Tigers', 'Twins', 'White Sox', 'Yankees']years = [2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,         2018, 2019, 2021, 2022]pe_df1 = pd.DataFrame()for df in team_data:    rev_col = df['pe_prop']        pe_df1 = pd.concat([pe_df1, rev_col], axis = 1)pe_df1 = pe_df1.Tpe_df1.columns = years[::-1]pe_df1.insert(0, 'teams', team_names2)pe_df1.reset_index(inplace = True)pe_df1.drop(columns = 'index', inplace = True)pe_prop = dash.Dash(__name__)pe_prop.layout = html.Div([    html.H1('MLB Yearly Player Expenses'),    html.Div([        dcc.Dropdown(            id = 'year-dropdown',            options=[{'label': str(year), 'value': year} for year in years],            value = years[0],        )    ]),    dcc.Graph(id = 'bar-graph')])@pe_prop.callback(    Output('bar-graph', 'figure'),    [Input('year-dropdown', 'value')])def update_graph4(year):        graph = go.Figure()    if year in pe_df1.columns:        new_df = pe_df1[['teams', year]]        new_df = new_df.sort_values(by = year)        x_data = new_df['teams']        y_data = new_df[year]        graph.add_trace(go.Bar(x = x_data, y = y_data))        graph.update_layout(title = f'MLB Player Expense Proportion by Team - {year}',                        xaxis_title = 'Team',                        yaxis_title = 'Player Expense Proportion',                        height = 550)                            return graphif __name__ == '__main__':    pe_prop.run_server(port = 8054, debug = True)webbrowser.open('http://127.0.0.1:8054/')#bar graphs revenue #END#bar graphs ticket pricetp_df = pd.DataFrame()for df in team_data:    rev_col = df['tick_price']        tp_df = pd.concat([tp_df, rev_col], axis = 1)tp_df = tp_df.Ttp_df.columns = years[::-1]tp_df.insert(0, 'teams', team_names2)tp_df.reset_index(inplace = True)tp_df.drop(columns = 'index', inplace = True)t_p = dash.Dash(__name__)t_p.layout = html.Div([    html.H1('MLB Yearly Ticket Price'),    html.Div([        dcc.Dropdown(            id = 'year-dropdown',            options=[{'label': str(year), 'value': year} for year in years],            value = years[0],        )    ]),    dcc.Graph(id = 'bar-graph')])@t_p.callback(    Output('bar-graph', 'figure'),    [Input('year-dropdown', 'value')])def update_graph5(year):        graph = go.Figure()    if year in tp_df.columns:        new_df = tp_df[['teams', year]]        new_df = new_df.sort_values(by = year)        x_data = new_df['teams']        y_data = new_df[year]        graph.add_trace(go.Bar(x = x_data, y = y_data))        graph.update_layout(title = f'MLB Ticket Price by Team - {year}',                        xaxis_title = 'Team',                        yaxis_title = 'Ticket Price (USD)',                        height = 550)                            return graphif __name__ == '__main__':    t_p.run_server(port = 8057, debug = True)webbrowser.open('http://127.0.0.1:8057/')